"google aw-android" = google_adwords_android_US,
#"google aw-ios" = google_adwords_ios_US,
"fb ads-android" = facebook_ads_android_US,
"fb ads-ios" = facebook_ads_ios_US,
"vungle-android" = vungle_android_US,
"vungle-ios" = vungle_ios_US))
View(output_US)
View(output_US)
colnames(output_US) = c('predicted', 'actual', 'pred/actual', 'actual users')
rm(list=ls())
drv <- dbDriver("PostgreSQL")
spdb <- dbConnect(
drv,
host = "redshift.pro.rc.laicosp.net", # (rc, mc, dc)
port = "5439",
dbname = "datawarehouse",
user = "amckay",
password = "o6EbWm4L79jRfegy"
)
game_schema = 'restaurantcity' # (restaurantcity, monstercity, dragoncity)
pred_date_start = '2016-07-08' # (2016-07-08 ,2016-05-03, 2016-05-24)
SQL_get_ltv_predictions <- function(register_source, register_platform, register_country, date) {
paste("SELECT users.user_id, date_register, ltv_actual, predicted_category, ltv_median FROM (SELECT user_id, date_register FROM ", game_schema,".t_user WHERE date_register > convert(datetime, '", date,"') AND date_register < DATEADD(day, 1, convert(datetime, '", date,"')) AND register_platform = '", register_platform,"' AND register_ip_country = '", register_country,"' AND lower(register_source) = '", register_source,"' AND user_category = 'player') users LEFT JOIN (SELECT user_id, NVL(sum(amount_gross)) as ltv_actual FROM ", game_schema,".t_transaction WHERE date_register > convert(datetime, '", date,"') AND date_register < DATEADD(day, 1, convert(datetime, '", date,"')) AND datetime <= DATEADD(day, 180, convert(datetime, '", date,"')) GROUP BY user_id) actual_ltv ON users.user_id = actual_ltv.user_id LEFT JOIN (SELECT * FROM (SELECT DISTINCT user_id, FIRST_VALUE(scored_labels) OVER (PARTITION BY user_id ORDER BY datetime DESC ROWS UNBOUNDED PRECEDING) AS scored_labels FROM ", game_schema,".mlp_ltv_output WHERE datetime >= convert(datetime, '", date,"') AND datetime <= DATEADD(day, ", forecast_day,", convert(datetime, '", date,"'))) mlp LEFT JOIN (SELECT predicted_category, ltv_median FROM ", game_schema,".aux_category_ltv_median WHERE date_start = convert(datetime, '", pred_date_start,"')) aux ON mlp.scored_labels = aux.predicted_category) predicted_ltv ON users.user_id = predicted_ltv.user_id;", sep = "")
}
dates <- list(NULL)
count = 1
for(day in 1:30) {
dates[count] <- paste(2016,09,day, sep = "-")
count <- count+1
}
ltv_prediction_model <- function(register_source, register_platform, register_country, dates) {
# loop over dates to generate data
temp_data <- NULL
for(d in dates) {
temp_data <- rbind(temp_data, dbGetQuery(spdb, SQL_get_ltv_predictions(register_source, register_platform, register_country, d)))
}
# output
c(sum(temp_data$ltv_median, na.rm = TRUE)/nrow(temp_data),
sum(temp_data$ltv_actual, na.rm = TRUE)/nrow(temp_data),
sum(temp_data$ltv_median, na.rm = TRUE)/sum(temp_data$ltv_actual, na.rm = TRUE),
nrow(temp_data))
}
forecast_day = 7
ML_mobilda_android_US <- ltv_prediction_model('mobilda', 'android', 'US', dates)
ML_mobilda_ios_US <- ltv_prediction_model('mobilda', 'ios', 'US', dates)
ML_adcolony_android_US <- ltv_prediction_model('adcolony', 'android', 'US', dates)
ML_adcolony_ios_US <- ltv_prediction_model('adcolony', 'ios', 'US', dates)
ML_google_adwords_android_US <- ltv_prediction_model('google adwords', 'android', 'US', dates)
ML_google_adwords_ios_US <- ltv_prediction_model('google adwords', 'ios', 'US', dates)
ML_facebook_ads_android_US <- ltv_prediction_model('facebook ads', 'android', 'US', dates)
ML_facebook_ads_ios_US <- ltv_prediction_model('facebook ads', 'ios', 'US', dates)
ML_vungle_android_US <- ltv_prediction_model('vungle', 'android', 'US', dates)
ML_vungle_ios_US <- ltv_prediction_model('vungle', 'ios', 'US', dates)
output_US_ML <- as.data.frame(rbind("mobilda-android" = ML_mobilda_android_US,
"mobilda-ios" = ML_mobilda_ios_US,
"adcolony-android" = ML_adcolony_android_US,
"adcolony-ios" = ML_adcolony_ios_US,
"google aw-android" = ML_google_adwords_android_US,
#"google aw-ios" = ML_google_adwords_ios_US,
"fb ads-android" = ML_facebook_ads_android_US,
"fb ads-ios" = ML_facebook_ads_ios_US,
"vungle-android" = ML_vungle_android_US,
"vungle-ios" = ML_vungle_ios_US))
View(output_US_ML)
rm(list=ls())
library(RPostgreSQL)
library(DBI)
library(ggplot2)
library(dplyr)
library(tidyr)
library(ggplot2)
library(gridExtra)
library(scales)
drv <- dbDriver("PostgreSQL")
spdb <- dbConnect(
drv,
host = "redshift.pro.rc.laicosp.net", # (rc, mc, dc)
port = "5439",
dbname = "datawarehouse",
user = "amckay",
password = "o6EbWm4L79jRfegy"
)
game_schema = 'restaurantcity' # (restaurantcity, monstercity, dragoncity)
pred_date_start = '2016-07-08' # (2016-07-08 ,2016-05-03, 2016-05-24)
SQL_get_ltv_predictions <- function(register_source, register_platform, register_country, date) {
paste("SELECT users.user_id, date_register, ltv_actual, predicted_category, ltv_median FROM (SELECT user_id, date_register FROM ", game_schema,".t_user WHERE date_register > convert(datetime, '", date,"') AND date_register < DATEADD(day, 1, convert(datetime, '", date,"')) AND register_platform = '", register_platform,"' AND register_ip_country = '", register_country,"' AND lower(register_source) = '", register_source,"' AND user_category = 'player') users LEFT JOIN (SELECT user_id, NVL(sum(amount_gross)) as ltv_actual FROM ", game_schema,".t_transaction WHERE date_register > convert(datetime, '", date,"') AND date_register < DATEADD(day, 1, convert(datetime, '", date,"')) AND datetime <= DATEADD(day, 180, convert(datetime, '", date,"')) GROUP BY user_id) actual_ltv ON users.user_id = actual_ltv.user_id LEFT JOIN (SELECT * FROM (SELECT DISTINCT user_id, FIRST_VALUE(scored_labels) OVER (PARTITION BY user_id ORDER BY datetime DESC ROWS UNBOUNDED PRECEDING) AS scored_labels FROM ", game_schema,".mlp_ltv_output WHERE datetime >= convert(datetime, '", date,"') AND datetime <= DATEADD(day, ", forecast_day,", convert(datetime, '", date,"'))) mlp LEFT JOIN (SELECT predicted_category, ltv_median FROM ", game_schema,".aux_category_ltv_median WHERE date_start = convert(datetime, '", pred_date_start,"')) aux ON mlp.scored_labels = aux.predicted_category) predicted_ltv ON users.user_id = predicted_ltv.user_id", sep = "")
}
dates <- list(NULL)
count = 1
for(day in 1:30) {
dates[count] <- paste(2016,09,day, sep = "-")
count <- count+1
}
ltv_prediction_model <- function(register_source, register_platform, register_country, dates) {
# loop over dates to generate data
temp_data <- NULL
for(d in dates) {
temp_data <- rbind(temp_data, dbGetQuery(spdb, SQL_get_ltv_predictions(register_source, register_platform, register_country, d)))
}
# output
c(sum(temp_data$ltv_median, na.rm = TRUE)/nrow(temp_data),
sum(temp_data$ltv_actual, na.rm = TRUE)/nrow(temp_data),
sum(temp_data$ltv_median, na.rm = TRUE)/sum(temp_data$ltv_actual, na.rm = TRUE),
nrow(temp_data))
}
forecast_day = 14
ML_mobilda_android_US_14d <- ltv_prediction_model('mobilda', 'android', 'US', dates)
ML_mobilda_ios_US_14d <- ltv_prediction_model('mobilda', 'ios', 'US', dates)
ML_adcolony_android_US_14d <- ltv_prediction_model('adcolony', 'android', 'US', dates)
ML_adcolony_ios_US_14d <- ltv_prediction_model('adcolony', 'ios', 'US', dates)
ML_google_adwords_android_US_14d <- ltv_prediction_model('google adwords', 'android', 'US', dates)
ML_google_adwords_ios_US_14d <- ltv_prediction_model('google adwords', 'ios', 'US', dates)
ML_facebook_ads_android_US_14d <- ltv_prediction_model('facebook ads', 'android', 'US', dates)
ML_facebook_ads_ios_US_14d <- ltv_prediction_model('facebook ads', 'ios', 'US', dates)
ML_vungle_android_US_14d <- ltv_prediction_model('vungle', 'android', 'US', dates)
ML_vungle_ios_US_14d <- ltv_prediction_model('vungle', 'ios', 'US', dates)
output_US_ML_14d <- as.data.frame(rbind("mobilda-android" = ML_mobilda_android_US,
"mobilda-ios" = ML_mobilda_ios_US,
"adcolony-android" = ML_adcolony_android_US,
"adcolony-ios" = ML_adcolony_ios_US,
"google aw-android" = ML_google_adwords_android_US,
#"google aw-ios" = ML_google_adwords_ios_US,
"fb ads-android" = ML_facebook_ads_android_US,
"fb ads-ios" = ML_facebook_ads_ios_US,
"vungle-android" = ML_vungle_android_US,
"vungle-ios" = ML_vungle_ios_US))
output_US_ML_14d <- as.data.frame(rbind("mobilda-android" = ML_mobilda_android_US_14d,
"mobilda-ios" = ML_mobilda_ios_US_14d,
"adcolony-android" = ML_adcolony_android_US_14d,
"adcolony-ios" = ML_adcolony_ios_US_14d,
"google aw-android" = ML_google_adwords_android_US_14d,
#"google aw-ios" = ML_google_adwords_ios_US_14d,
"fb ads-android" = ML_facebook_ads_android_US_14d,
"fb ads-ios" = ML_facebook_ads_ios_US_14d,
"vungle-android" = ML_vungle_android_US_14d,
"vungle-ios" = ML_vungle_ios_US_14d))
colnames(output_US_ML_14d) = c('predicted', 'actual', 'pred/actual', 'actual users')
View(output_US_ML_14d)
rm(list=ls())
library(RPostgreSQL)
library(DBI)
library(ggplot2)
library(dplyr)
library(tidyr)
library(ggplot2)
library(gridExtra)
library(scales)
drv <- dbDriver("PostgreSQL")
spdb <- dbConnect(
drv,
host = "redshift.pro.mc.laicosp.net", # (rc, mc, dc)
port = "5439",
dbname = "datawarehouse",
user = "amckay",
password = "o6EbWm4L79jRfegy"
)
country = 'US' # (US,UK,CA,AU,DE,FR)
register_platform = 'android' # (android,ios)
forecast_day = 7 # (7, 30, 90)
game_schema = 'monstercity' # (restaurantcity, monstercity, dragoncity)
pred_date_start = '2016-05-03' # (2016-07-08 ,2016-05-03, )
SQL_get_ltvs <- function(datetime) {
paste("SELECT users.user_id, date_register, register_platform, register_ip_country, ltv_actual, predicted_category, ltv_median FROM (SELECT user_id, date_register, register_platform, register_ip_country FROM ", game_schema, ".t_user WHERE date_register > convert(datetime, '", datetime, "') AND date_register < DATEADD(day, 1, convert(datetime, '", datetime, "')) AND register_platform = '", register_platform, "' AND register_ip_country = '", country, "') users LEFT JOIN (SELECT user_id, sum(amount_gross) as ltv_actual FROM ", game_schema, ".t_transaction WHERE date_register > convert(datetime, '", datetime, "') AND date_register < DATEADD(day, 1, convert(datetime, '", datetime, "')) AND datetime <= DATEADD(day, 180, convert(datetime, '", datetime, "')) GROUP BY user_id) actual_ltv ON users.user_id = actual_ltv.user_id LEFT JOIN (SELECT * FROM (SELECT DISTINCT user_id, FIRST_VALUE(scored_labels) OVER (PARTITION BY user_id ORDER BY datetime DESC ROWS UNBOUNDED PRECEDING) AS scored_labels FROM ", game_schema, ".mlp_ltv_output WHERE datetime >= convert(datetime, '", datetime, "') AND datetime <= DATEADD(day, ", forecast_day, ", convert(datetime, '", datetime, "'))) mlp LEFT JOIN (SELECT predicted_category, ltv_median FROM ", game_schema, ".aux_category_ltv_median WHERE date_start = convert(datetime, '", pred_date_start, "')) aux ON mlp.scored_labels = aux.predicted_category) predicted_ltv ON users.user_id = predicted_ltv.user_id;", sep = "")
}
regdatesRandom <- c("2016-07-08", "2016-07-13", "2016-07-19", "2016-07-29", "2016-08-03", "2016-08-09", "2016-08-14", "2016-08-20", "2016-08-25", "2016-08-30", "2016-09-05", "2016-09-11", "2016-09-17", "2016-09-28", "2016-10-05")
actual_category_counter <- function(ltvData, k) {
c(sum(ltvData$actual_category[ltvData$predicted_category==k]==0),
sum(ltvData$actual_category[ltvData$predicted_category==k]==1),
sum(ltvData$actual_category[ltvData$predicted_category==k]==2),
sum(ltvData$actual_category[ltvData$predicted_category==k]==3),
sum(ltvData$actual_category[ltvData$predicted_category==k]==4),
sum(ltvData$actual_category[ltvData$predicted_category==k]==5))
}
predictionAccuracyPerCategory <- function(ltvdata, category) {
sum(ltvdata[which(ltvdata$predicted_category==category),]$ltv_median)/sum(ltvdata[which(ltvdata$predicted_category==category),]$ltv_actual)*100
}
predicted_income <- function(ltvData, k) {
sum(ltvData[which(ltvData$predicted_category==k),]$ltv_median)
}
actual_income <- function(ltvData, k) {
sum(ltvData[which(ltvData$predicted_category==k),]$ltv_actual)
}
num_format <- function(n) {format(round(n), big.mark=",", scientific=FALSE)}
forecast_day = 90 # (7, 30, 90)
ltvsRandDates90day = NULL
for(regdate in regdatesRandom) {
ltvsRandDates90day <- rbind(ltvsRandDates90day, dbGetQuery(spdb, SQL_get_ltvs(regdate)))
}
View(ltvsRandDates90day)
ltvsRandDates90dayCat2 <- ltvsRandDates90day[ltvsRandDates90day$predicted_category==2,]
View(ltvsRandDates90dayCat2)
ltvsRandDates90dayCat2[1:5, 1]
round(ltvsRandDates90dayCat2[1:5, 1])
?round
?scipen
num_format(ltvsRandDates90dayCat2[1:5, 1])
format(ltvsRandDates90dayCat2[1:5, 1])
format(ltvsRandDates90dayCat2[1:5, 1], scientific = FALSE)
View(ltvsRandDates90dayCat2)
View(ltvsRandDates90dayCat2)
View(ltvsRandDates90dayCat2)
View(ltvsRandDates90dayCat2)
View(ltvsRandDates90dayCat2)
View(ltvsRandDates90day)
testdate <- SQL_get_ltvs('2016-07-08')
testquery <- SQL_get_ltvs('2016-07-08')
testdate <- dbGetQuery(spdb, SQL_get_ltvs('2016-07-08'))
View(testdate)
testdateCat2 <- testdate[testdate$predicted_category==2,]
View(testdateCat2)
testquery
testdate <- dbGetQuery(spdb, "SELECT users.user_id, date_register, register_platform, register_ip_country, ltv_actual, predicted_category, ltv_median
FROM      (SELECT user_id, date_register, register_platform, register_ip_country
FROM monstercity.t_user
WHERE date_register > convert(datetime, '2016-07-08')
AND date_register < DATEADD(day, 1, convert(datetime, '2016-07-08'))
AND register_platform = 'android'
AND register_ip_country = 'US') users
LEFT JOIN (SELECT user_id, sum(amount_gross) as ltv_actual
FROM monstercity.t_transaction
WHERE date_register > convert(datetime, '2016-07-08')
AND date_register < DATEADD(day, 1, convert(datetime, '2016-07-08'))
AND datetime <= DATEADD(day, 180, convert(datetime, '2016-07-08'))
GROUP BY user_id) actual_ltv
ON users.user_id = actual_ltv.user_id
LEFT JOIN (SELECT *
FROM        (SELECT DISTINCT user_id,
FIRST_VALUE(scored_labels) OVER (PARTITION BY user_id ORDER BY datetime DESC ROWS UNBOUNDED PRECEDING) AS scored_labels
FROM monstercity.mlp_ltv_output
WHERE datetime >= convert(datetime, '2016-07-08')
AND datetime <= DATEADD(day, 90, convert(datetime, '2016-07-08'))) mlp
LEFT JOIN   (SELECT predicted_category, ltv_median
FROM monstercity.aux_category_ltv_median
WHERE date_start = convert(datetime, '2016-05-03')) aux
ON mlp.scored_labels = aux.predicted_category) predicted_ltv
ON users.user_id = predicted_ltv.user_id
WHERE users.user_id = 3152404953482318336
LIMIT 100;")
testdate <- dbGetQuery(spdb, "SELECT users.user_id, date_register, register_platform, register_ip_country, ltv_actual, predicted_category, ltv_median
FROM      (SELECT user_id, date_register, register_platform, register_ip_country
FROM monstercity.t_user
WHERE date_register > convert(datetime, '2016-07-08')
AND date_register < DATEADD(day, 1, convert(datetime, '2016-07-08'))
AND register_platform = 'android'
AND register_ip_country = 'US') users
LEFT JOIN (SELECT user_id, sum(amount_gross) as ltv_actual
FROM monstercity.t_transaction
WHERE date_register > convert(datetime, '2016-07-08')
AND date_register < DATEADD(day, 1, convert(datetime, '2016-07-08'))
AND datetime <= DATEADD(day, 180, convert(datetime, '2016-07-08'))
GROUP BY user_id) actual_ltv
ON users.user_id = actual_ltv.user_id
LEFT JOIN (SELECT *
FROM        (SELECT DISTINCT user_id,
FIRST_VALUE(scored_labels) OVER (PARTITION BY user_id ORDER BY datetime DESC ROWS UNBOUNDED PRECEDING) AS scored_labels
FROM monstercity.mlp_ltv_output
WHERE datetime >= convert(datetime, '2016-07-08')
AND datetime <= DATEADD(day, 90, convert(datetime, '2016-07-08'))) mlp
LEFT JOIN   (SELECT predicted_category, ltv_median
FROM monstercity.aux_category_ltv_median
WHERE date_start = convert(datetime, '2016-05-03')) aux
ON mlp.scored_labels = aux.predicted_category) predicted_ltv
ON users.user_id = predicted_ltv.user_id
LIMIT 100;")
testdate <- dbGetQuery(spdb, "SELECT users.user_id, date_register, register_platform, register_ip_country, ltv_actual, predicted_category, ltv_median
FROM      (SELECT user_id, date_register, register_platform, register_ip_country
FROM monstercity.t_user
WHERE date_register > convert(datetime, '2016-07-08')
AND date_register < DATEADD(day, 1, convert(datetime, '2016-07-08'))
AND register_platform = 'android'
AND register_ip_country = 'US') users
LEFT JOIN (SELECT user_id, sum(amount_gross) as ltv_actual
FROM monstercity.t_transaction
WHERE date_register > convert(datetime, '2016-07-08')
AND date_register < DATEADD(day, 1, convert(datetime, '2016-07-08'))
AND datetime <= DATEADD(day, 180, convert(datetime, '2016-07-08'))
GROUP BY user_id) actual_ltv
ON users.user_id = actual_ltv.user_id
LEFT JOIN (SELECT *
FROM        (SELECT DISTINCT user_id,
FIRST_VALUE(scored_labels) OVER (PARTITION BY user_id ORDER BY datetime DESC ROWS UNBOUNDED PRECEDING) AS scored_labels
FROM monstercity.mlp_ltv_output
WHERE datetime >= convert(datetime, '2016-07-08')
AND datetime <= DATEADD(day, 90, convert(datetime, '2016-07-08'))) mlp
LEFT JOIN   (SELECT predicted_category, ltv_median
FROM monstercity.aux_category_ltv_median
WHERE date_start = convert(datetime, '2016-05-03')) aux
ON mlp.scored_labels = aux.predicted_category) predicted_ltv
ON users.user_id = predicted_ltv.user_id;")
View(testdate)
testdateCat2 <- testdate[testdate$predicted_category==2,]
View(testdateCat2)
testdateCat2[1:5, 1]
format(testdateCat2[1:5, 1], scientific = FALSE)
testdate <- dbGetQuery(spdb, "SELECT users.user_id, date_register, register_platform, register_ip_country, ltv_actual, predicted_category, ltv_median
FROM      (SELECT user_id, date_register, register_platform, register_ip_country
FROM monstercity.t_user
WHERE date_register > convert(datetime, '2016-07-08')
AND date_register < DATEADD(day, 1, convert(datetime, '2016-07-08'))
AND register_platform = 'android'
AND register_ip_country = 'US') users
LEFT JOIN (SELECT user_id, sum(amount_gross) as ltv_actual
FROM monstercity.t_transaction
WHERE date_register > convert(datetime, '2016-07-08')
AND date_register < DATEADD(day, 1, convert(datetime, '2016-07-08'))
AND datetime <= DATEADD(day, 180, convert(datetime, '2016-07-08'))
GROUP BY user_id) actual_ltv
ON users.user_id = actual_ltv.user_id
LEFT JOIN (SELECT *
FROM        (SELECT DISTINCT user_id,
FIRST_VALUE(scored_labels) OVER (PARTITION BY user_id ORDER BY datetime DESC ROWS UNBOUNDED PRECEDING) AS scored_labels
FROM monstercity.mlp_ltv_output
WHERE datetime >= convert(datetime, '2016-07-08')
AND datetime <= DATEADD(day, 90, convert(datetime, '2016-07-08'))) mlp
LEFT JOIN   (SELECT predicted_category, ltv_median
FROM monstercity.aux_category_ltv_median
WHERE date_start = convert(datetime, '2016-05-03')) aux
ON mlp.scored_labels = aux.predicted_category) predicted_ltv
ON users.user_id = predicted_ltv.user_id
WHERE users.user_id = 3152482343876432896;")
rm(list=ls())
ls()
?require
?as.Date.POSIXlt()
as.POSIXct('2016-12-17 01:05:00.0')
as.POSIXct('2016-12-17 01:05:00.0')$wday
testdate <- as.POSIXct('2016-12-17 01:05:00.0')
testdate$wday
testdate <- as.POSIXlt('2016-12-17 01:05:00.0')
testdate$wday
testdate
testdate + 1
testdate + 3600
game <- "DC"
country <- 'FR'
campaign_start  <- '2016-12-17 01:00:00'
campaign_end    <- '2017-02-10 23:59:59'
benchmark_start <- '2016-10-17 01:00:00'
benchmark_end   <- '2016-12-16 21:59:59'
file_path <- "datetime FR.csv"
setwd("~/Desktop/projects/tv attribution")
day <- "03:00:00"
prime <- "19:00:00"
night <- "22:00:00"
lag <- 15
folder <- "FranceXmas17/Plots"
folder <- "graphs"
if (!require("dplyr")) install.packages("dplyr"); library(dplyr)
if (!require("RPostgreSQL")) install.packages("RPostgreSQL"); library(RPostgreSQL)
if (!require("ggplot2")) install.packages("ggplot2"); library(ggplot2)
if (!require("MASS")) install.packages("MASS"); library(MASS)
if(game == "DC"){
host <- "redshift.pro.dc.laicosp.net"
table <- "dragoncity.t_user"
}else if(game == "ML"){
host <- "redshift.pro.mc.laicosp.net"
table <- "monstercity.t_user"
}
drv <- dbDriver("PostgreSQL")
spdb <- dbConnect(
drv,
host = host,
port = "5439",
dbname = "datawarehouse",
user = "amckay",
password = "o6EbWm4L79jRfegy"
)
campaign_query <- paste( "SELECT date_register, register_ip_timezone, user_id
FROM ",table,
" WHERE (date_register+register_ip_timezone) >='", campaign_start, "'
AND (date_register+register_ip_timezone) <= '", campaign_end, "'
AND user_category <> 'hacker' AND user_category = 'player'
AND (register_source is NULL or lower(register_source) like '%organic%' or register_source = '')
AND (register_platform='ios' or register_platform = 'android')
AND register_ip_country ='", country,"'", sep = "")
NGU_campaign <- dbGetQuery(spdb, campaign_query)
View(NGU_campaign)
real_date    <- NGU_campaign$date_register
wday         <- as.POSIXlt(real_date)$wday # Should be done after conversion of real_date?
wday          <- as.POSIXlt(real_date)$wday # Should be done after conversion of real_date?
hour          <- unlist(strsplit(as.character(real_date), " "))[seq(2,length(real_date)*2,by = 2)]
seq(2,length(real_date)*2,by = 2)
NGU_benchmark <- cbind(NGU_benchmark, real_date, wday, hour)
NGU_benchmark <- dbGetQuery(spdb, benchmark_query)
real_date    <- NGU_campaign$date_register
wday         <- as.POSIXlt(real_date)$wday # Should be done after conversion of real_date?
NGU_campaign <- cbind(NGU_campaign, real_date, wday)
NGU_campaign$real_date[NGU_campaign$register_ip_timezone == "+01:00"] <- NGU_campaign$real_date[NGU_campaign$register_ip_timezone == "+01:00"] + 3600
NGU_campaign$real_date[NGU_campaign$register_ip_timezone == "+02:00"] <- NGU_campaign$real_date[NGU_campaign$register_ip_timezone == "+02:00"] + 2*3600
NGU_campaign$real_date[NGU_campaign$register_ip_timezone == "+03:00"] <- NGU_campaign$real_date[NGU_campaign$register_ip_timezone == "+03:00"] + 3*3600
NGU_campaign$real_date[NGU_campaign$register_ip_timezone == "+04:00"] <- NGU_campaign$real_date[NGU_campaign$register_ip_timezone == "+04:00"] + 4*3600
NGU_campaign$real_date[NGU_campaign$register_ip_timezone == "+05:00"] <- NGU_campaign$real_date[NGU_campaign$register_ip_timezone == "+05:00"] + 5*3600
NGU_campaign$real_date[NGU_campaign$register_ip_timezone == "+06:00"] <- NGU_campaign$real_date[NGU_campaign$register_ip_timezone == "+06:00"] + 6*3600
NGU_campaign$real_date[NGU_campaign$register_ip_timezone == "+07:00"] <- NGU_campaign$real_date[NGU_campaign$register_ip_timezone == "+07:00"] + 7*3600
NGU_campaign$real_date[NGU_campaign$register_ip_timezone == "+08:00"] <- NGU_campaign$real_date[NGU_campaign$register_ip_timezone == "+08:00"] + 8*3600
NGU_campaign$real_date[NGU_campaign$register_ip_timezone == "+09:00"] <- NGU_campaign$real_date[NGU_campaign$register_ip_timezone == "+09:00"] + 9*3600
NGU_campaign$real_date[NGU_campaign$register_ip_timezone == "+09:30"] <- NGU_campaign$real_date[NGU_campaign$register_ip_timezone == "+09:30"] + 9*3600 + 3600*0.5
NGU_campaign$real_date[NGU_campaign$register_ip_timezone == "+10:00"] <- NGU_campaign$real_date[NGU_campaign$register_ip_timezone == "+10:00"] + 10*3600
NGU_campaign$real_date[NGU_campaign$register_ip_timezone == "+10:30"] <- NGU_campaign$real_date[NGU_campaign$register_ip_timezone == "+10:30"] + 10*3600 + 3600*0.5
NGU_campaign$real_date[NGU_campaign$register_ip_timezone == "+11:00"] <- NGU_campaign$real_date[NGU_campaign$register_ip_timezone == "+11:00"] + 11*3600
NGU_campaign$real_date[NGU_campaign$register_ip_timezone == "+12:00"] <- NGU_campaign$real_date[NGU_campaign$register_ip_timezone == "+12:00"] + 12*3600
NGU_campaign$real_date[NGU_campaign$register_ip_timezone == "-01:00"] <- NGU_campaign$real_date[NGU_campaign$register_ip_timezone == "-01:00"] - 3600
NGU_campaign$real_date[NGU_campaign$register_ip_timezone == "-02:00"] <- NGU_campaign$real_date[NGU_campaign$register_ip_timezone == "-02:00"] - 2*3600
NGU_campaign$real_date[NGU_campaign$register_ip_timezone == "-03:00"] <- NGU_campaign$real_date[NGU_campaign$register_ip_timezone == "-03:00"] - 3*3600
NGU_campaign$real_date[NGU_campaign$register_ip_timezone == "-03:30"] <- NGU_campaign$real_date[NGU_campaign$register_ip_timezone == "-03:30"] - 3*3600 + 3600*0.5
NGU_campaign$real_date[NGU_campaign$register_ip_timezone == "-04:00"] <- NGU_campaign$real_date[NGU_campaign$register_ip_timezone == "-04:00"] - 4*3600
NGU_campaign$real_date[NGU_campaign$register_ip_timezone == "-05:00"] <- NGU_campaign$real_date[NGU_campaign$register_ip_timezone == "-05:00"] - 5*3600
NGU_campaign$real_date[NGU_campaign$register_ip_timezone == "-06:00"] <- NGU_campaign$real_date[NGU_campaign$register_ip_timezone == "-06:00"] - 6*3600
NGU_campaign$real_date[NGU_campaign$register_ip_timezone == "-07:00"] <- NGU_campaign$real_date[NGU_campaign$register_ip_timezone == "-07:00"] - 7*3600
NGU_campaign$real_date[NGU_campaign$register_ip_timezone == "-08:00"] <- NGU_campaign$real_date[NGU_campaign$register_ip_timezone == "-08:00"] - 8*3600
NGU_campaign$real_date[NGU_campaign$register_ip_timezone == "-09:00"] <- NGU_campaign$real_date[NGU_campaign$register_ip_timezone == "-09:00"] - 9*3600
NGU_campaign$real_date[NGU_campaign$register_ip_timezone == "-10:00"] <- NGU_campaign$real_date[NGU_campaign$register_ip_timezone == "-10:00"] - 10*3600
NGU_campaign$real_date[NGU_campaign$register_ip_timezone == "-11:00"] <- NGU_campaign$real_date[NGU_campaign$register_ip_timezone == "-11:00"] - 11*3600
NGU_campaign$real_date[NGU_campaign$register_ip_timezone == "-12:00"] <- NGU_campaign$real_date[NGU_campaign$register_ip_timezone == "-12:00"] - 12*3600
benchmark_query <- paste( "SELECT date_register, register_ip_timezone, user_id
FROM ", table,
" WHERE (date_register+register_ip_timezone) >='", benchmark_start, "'
AND (date_register+register_ip_timezone) <= '", benchmark_end, "'
AND user_category <> 'hacker'  AND user_category = 'player'
AND (register_source is NULL or lower(register_source) like '%organic%' or register_source = '')
AND (register_platform='ios' or register_platform = 'android')
AND register_ip_country = '", country,"'", sep = "")
NGU_benchmark <- dbGetQuery(spdb, benchmark_query)
real_date     <- NGU_benchmark$date_register
wday          <- as.POSIXlt(real_date)$wday # Should be done after conversion of real_date?
hour          <- unlist(strsplit(as.character(real_date), " "))[seq(2,length(real_date)*2,by = 2)]
NGU_benchmark <- cbind(NGU_benchmark, real_date, wday, hour)
NGU_benchmark$real_date[NGU_benchmark$register_ip_timezone == "+01:00"] <- NGU_benchmark$real_date[NGU_benchmark$register_ip_timezone == "+01:00"] + 3600
NGU_benchmark$real_date[NGU_benchmark$register_ip_timezone == "+02:00"] <- NGU_benchmark$real_date[NGU_benchmark$register_ip_timezone == "+02:00"] + 2*3600
NGU_benchmark$real_date[NGU_benchmark$register_ip_timezone == "+03:00"] <- NGU_benchmark$real_date[NGU_benchmark$register_ip_timezone == "+03:00"] + 3*3600
NGU_benchmark$real_date[NGU_benchmark$register_ip_timezone == "+04:00"] <- NGU_benchmark$real_date[NGU_benchmark$register_ip_timezone == "+04:00"] + 4*3600
NGU_benchmark$real_date[NGU_benchmark$register_ip_timezone == "+05:00"] <- NGU_benchmark$real_date[NGU_benchmark$register_ip_timezone == "+05:00"] + 5*3600
NGU_benchmark$real_date[NGU_benchmark$register_ip_timezone == "+06:00"] <- NGU_benchmark$real_date[NGU_benchmark$register_ip_timezone == "+06:00"] + 6*3600
NGU_benchmark$real_date[NGU_benchmark$register_ip_timezone == "+07:00"] <- NGU_benchmark$real_date[NGU_benchmark$register_ip_timezone == "+07:00"] + 7*3600
NGU_benchmark$real_date[NGU_benchmark$register_ip_timezone == "+08:00"] <- NGU_benchmark$real_date[NGU_benchmark$register_ip_timezone == "+08:00"] + 8*3600
NGU_benchmark$real_date[NGU_benchmark$register_ip_timezone == "+09:00"] <- NGU_benchmark$real_date[NGU_benchmark$register_ip_timezone == "+09:00"] + 9*3600
NGU_benchmark$real_date[NGU_benchmark$register_ip_timezone == "+09:30"] <- NGU_benchmark$real_date[NGU_benchmark$register_ip_timezone == "+09:30"] + 9*3600 + 3600*0.5
NGU_benchmark$real_date[NGU_benchmark$register_ip_timezone == "+10:00"] <- NGU_benchmark$real_date[NGU_benchmark$register_ip_timezone == "+10:00"] + 10*3600
NGU_benchmark$real_date[NGU_benchmark$register_ip_timezone == "+10:30"] <- NGU_benchmark$real_date[NGU_benchmark$register_ip_timezone == "+10:30"] + 10*3600 + 3600*0.5
NGU_benchmark$real_date[NGU_benchmark$register_ip_timezone == "+11:00"] <- NGU_benchmark$real_date[NGU_benchmark$register_ip_timezone == "+11:00"] + 11*3600
NGU_benchmark$real_date[NGU_benchmark$register_ip_timezone == "+12:00"] <- NGU_benchmark$real_date[NGU_benchmark$register_ip_timezone == "+12:00"] + 12*3600
NGU_benchmark$real_date[NGU_benchmark$register_ip_timezone == "-01:00"] <- NGU_benchmark$real_date[NGU_benchmark$register_ip_timezone == "-01:00"] - 3600
NGU_benchmark$real_date[NGU_benchmark$register_ip_timezone == "-02:00"] <- NGU_benchmark$real_date[NGU_benchmark$register_ip_timezone == "-02:00"] - 2*3600
NGU_benchmark$real_date[NGU_benchmark$register_ip_timezone == "-02:30"] <- NGU_benchmark$real_date[NGU_benchmark$register_ip_timezone == "-02:30"] - 2*3600 + 3600*0.5
NGU_benchmark$real_date[NGU_benchmark$register_ip_timezone == "-03:00"] <- NGU_benchmark$real_date[NGU_benchmark$register_ip_timezone == "-03:00"] - 3*3600
NGU_benchmark$real_date[NGU_benchmark$register_ip_timezone == "-03:30"] <- NGU_benchmark$real_date[NGU_benchmark$register_ip_timezone == "-03:30"] - 3*3600 + 3600*0.5
NGU_benchmark$real_date[NGU_benchmark$register_ip_timezone == "-04:00"] <- NGU_benchmark$real_date[NGU_benchmark$register_ip_timezone == "-04:00"] - 4*3600
NGU_benchmark$real_date[NGU_benchmark$register_ip_timezone == "-05:00"] <- NGU_benchmark$real_date[NGU_benchmark$register_ip_timezone == "-05:00"] - 5*3600
NGU_benchmark$real_date[NGU_benchmark$register_ip_timezone == "-06:00"] <- NGU_benchmark$real_date[NGU_benchmark$register_ip_timezone == "-06:00"] - 6*3600
NGU_benchmark$real_date[NGU_benchmark$register_ip_timezone == "-07:00"] <- NGU_benchmark$real_date[NGU_benchmark$register_ip_timezone == "-07:00"] - 7*3600
NGU_benchmark$real_date[NGU_benchmark$register_ip_timezone == "-08:00"] <- NGU_benchmark$real_date[NGU_benchmark$register_ip_timezone == "-08:00"] - 8*3600
NGU_benchmark$real_date[NGU_benchmark$register_ip_timezone == "-09:00"] <- NGU_benchmark$real_date[NGU_benchmark$register_ip_timezone == "-09:00"] - 9*3600
NGU_benchmark$real_date[NGU_benchmark$register_ip_timezone == "-10:00"] <- NGU_benchmark$real_date[NGU_benchmark$register_ip_timezone == "-10:00"] - 10*3600
NGU_benchmark$real_date[NGU_benchmark$register_ip_timezone == "-11:00"] <- NGU_benchmark$real_date[NGU_benchmark$register_ip_timezone == "-11:00"] - 11*3600
NGU_benchmark$real_date[NGU_benchmark$register_ip_timezone == "-12:00"] <- NGU_benchmark$real_date[NGU_benchmark$register_ip_timezone == "-12:00"] - 12*3600
View(NGU_benchmark)
NGU_benchmark$hour <- as.character(NGU_benchmark$hour) # Convert factors to characters
time <- as.POSIXlt(time)
time <- as.POSIXlt(testdate)
hour_s <- unlist(strsplit(as.character(time), " "))[2]
hour_e <- unlist(strsplit(as.character(time + 60), " "))[2]
time$wday
View(NGU_benchmark)
day   <- NGU_benchmark[NGU_benchmark$wday == time$wday & NGU_benchmark$hour > hour_s & NGU_benchmark$hour <= hour_e, ]
if(dim(day)[1] == 0 | is.null(dim(day)[1])) return( 0 )
View(day)
dates <- unlist(strsplit(as.character(day$real_date), " "))[seq(1,length(day[,4])*2,by = 2)]
unique_days <- unique(dates)
all_days<- as.POSIXlt(seq(as.Date(campaign_start), as.Date(campaign_end), by = "days"))$wday
bench_counts <- rep(0, length(all_days[all_days == time$wday])) # set all the days to 0
for(d in 1:length(unique_days)){
bench_counts[d] <- length( unique(day$user_id[dates == unique_days[d] ]) )
}
View(day)
return( mean(bench_counts) )
mean(bench_counts)
View(day)
as.POSIXlt(seq(as.Date(campaign_start), as.Date(campaign_end), by = "days"))$wday == time$wday
sum(as.POSIXlt(seq(as.Date(campaign_start), as.Date(campaign_end), by = "days"))$wday == time$wday)
unique(day$user_id)
length(unique(day$user_id))
sum(as.POSIXlt(seq(as.Date(campaign_start), as.Date(campaign_end), by = "days"))$wday == time$wday)
ngus <- unique(day$user_id)
bench_weekday_count <- sum(as.POSIXlt(seq(as.Date(campaign_start), as.Date(campaign_end), by = "days"))$wday == time$wday)
ngus/bench_weekday_count
ngus <- unique(day$user_id)
ngus <- length(unique(day$user_id))
bench_weekday_count <- sum(as.POSIXlt(seq(as.Date(campaign_start), as.Date(campaign_end), by = "days"))$wday == time$wday)
ngus/bench_weekday_count
bench_counts <- ngus/bench_weekday_count
spots <- read.csv(file_path,sep = ";", dec = ",", header = TRUE, stringsAsFactors = FALSE )
View(spots)
View(spots)
spots <- spots[spots$Exactspotbroadcastingtime != "",]
spots$ContactsMen
typeof(spots$ContactsMen)
?tapply()
daypart <- rep(NA, dim(spots)[1] )
spots   <- cbind(spots, daypart)
day <- "03:00:00"
spots$daypart[ spots$Exactspotbroadcastingtime >= day   & spots$Exactspotbroadcastingtime < prime ] <- "DayTime"
spots$daypart[ spots$Exactspotbroadcastingtime >= prime & spots$Exactspotbroadcastingtime < night ] <- "PrimeTime"
spots$daypart[ is.na(spots$daypart)] <- "NightTime"
?with
spots <- spots[with(spots, order(Broadcastingdate, Exactspotbroadcastingtime)), ]
?paste0
times <- strptime( paste0(spots[,2]," ",spots[,3]), "%d/%m/%y %H:%M:%S")
spots <- cbind(spots, times)
wday <- as.POSIXlt(times)$wday
spots <- cbind(spots, wday)
counts <- matrix(rep(NA, lag*dim(spots)[1]), ncol = lag)
dim(spots)
